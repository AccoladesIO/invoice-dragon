import Head from 'next/head'
import Image from 'next/image'
import { Inter } from '@next/font/google'
import styles from '@/styles/Home.module.scss'
import Typewriter from "typewriter-effect";
import InvoiceTemplate from "../components/InvoiceTemplate/InvoiceTemplate";
import Form from "../components/Form/Form";
import Previewed from "../components/Preview/Preview";
import { useState } from 'react';
import Dropdown from '../components/Dropdown/Dropdown';
import logoP from '../assets/images/placeholder-image.png';

const inter = Inter({ subsets: ['latin'] })

export default function Home() {
  const [service, setService] = useState('invoice');
  const [showPreview, setShowPreview] = useState(false);
  const [formData, setFormData] = useState({});
  const [rows, setRows] = useState(Array(1).fill({id: 0, quantity: 1, amount: '0.00'}));
  const [currencyCode, setCurrencyCode] = useState('USD');
  const [currencySymbol, setCurrencySymbol] = useState('$');
  const [logo, setLogo] = useState(logoP);
  const [logoUpdated, setLogoUpdated] = useState(false);
  const [template, setTemplate] = useState(null);

  const handleChange = (e) => {
    setService(e.target.value);
  }
  
  const handleFormChange = (name, value) => {
    setFormData({
      ...formData, [name]: value
    })
  }
  const handleToggle = () => {
    setShowPreview(!showPreview);
  }

   // Table Functions
   const handleTableUpdate = (e, id, amount) => {
    setRows((prevRows) => {
      const updateTable = [...prevRows];
      const currentRowIndex = updateTable.findIndex((row) => row.id === id);
      updateTable[currentRowIndex] = { ...updateTable[currentRowIndex], [e.target.name]: e.target.value }
      if ( amount !== undefined) {
        updateTable[currentRowIndex].amount = amount;
      }
      if (e.target.name === 'rate' || e.target.name === 'quantity' ) {
        updateTable[currentRowIndex][e.target.name] = Number(e.target.value);
      }
      return updateTable;
    });
  }
  const handleRowAdd = () => {
    const lastId = rows.length ? rows[rows.length - 1].id : 0;
    setRows((prevRows) => [...prevRows, {id: lastId + 1, quantity: 1, amount: '0.00'}]);
  }

  const handleRowRemove = (id) => {
    setRows((prevRows) => prevRows.filter(item => item.id !== id));
  }
  const handleCurrencyModify = (curr) => {
    setCurrencyCode(curr.code)
    setCurrencySymbol(curr.symbol);
  }

  const handleLogoUpdate = (e) => {
    const reader = new FileReader();
    reader.onload = () => {
      if (reader.readyState === 2) {
        setLogo(reader.result);
        setLogoUpdated(true);
      }
    }
    reader.readAsDataURL(e.target.files[0]);
  }

  const handleTemplateChange = (e) => {
    setTemplate(e.target.value);
  }

  return (
    <>
      <Head>
        <title>Invoice Receipt Generator</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className={styles.container}>
          <div className={styles.header}>
            <h1>Create your  
              <span className={styles.typewriter}>
                <Typewriter
                  options={{
                    strings: [
                      " invoice",
                      " receipt",
                    ],
                    autoStart: true,
                    loop: true,
                    cursor: "",
                    delay: "natural",
                  }}
                />
              </span>
            </h1>
            <div className={styles.services}>
              <h3>Select Service</h3>
              <select name="choice" id="service" defaultValue={service} onChange={handleChange}>
                <option value="receipt">Receipt</option>
                <option value="invoice">Invoice</option>
              </select>
            </div>
          </div>
          <InvoiceTemplate
            changeTemplate={handleTemplateChange}
          />
          <div className={styles.template__section}>
            <div className={styles.main__section}>
              {!showPreview && <Form
                prefill={formData}
                rows={rows}
                logo={logo}
                updateLogo={handleLogoUpdate}
                logoUpdated={logoUpdated}
                currencySymbol={currencySymbol}
                onFormMod={handleFormChange}
                onPreviewToggle={handleToggle}
                onRowAdd={handleRowAdd}
                onRowRemove={handleRowRemove}
                onTableUpdate={handleTableUpdate}
                />}
              
              {showPreview && <Previewed 
                {...formData}
                rows={rows}
                logo={logo}
                template={template}
                currencySymbol={currencySymbol}
                onPreviewToggle={handleToggle}
              />}
            </div>
            <div className={styles.action__section}>
              <div>
                ACTIONS
                <br />
                <br />
                <button className={styles.action__btn} onClick={handleToggle}>Preview Invoice</button>
                <button className={styles.action__btn}>Print</button>
                <button className={styles.action__btn}>Email</button>
              </div>
              <br />
              <br />
              <label htmlFor="currency-select">CURRENCY</label>
              <br />
              <br />
              <Dropdown
                currencyCode={currencyCode}
                currencySymbol={currencySymbol}
                onCurrencyModify={handleCurrencyModify}
              />
            </div>
          </div>
        </div>
        {/* service={service} */}
        {/* template={template} */}
      </main>
    </>
  )
}
